{
  "dataset_name": "pc3",
  "task_prefix": "NASA software defect prediction dataset from flight software for earth orbiting satellite. Contains static code metrics extracted using McCabe and Halstead feature extractors to predict software quality and defect-proneness. Each example contains 36 features. Predict the target class.",
  "column_descriptions": {
    "LOC_BLANK": "Count of blank lines - empty lines used for code readability and organization.",
    "BRANCH_COUNT": "Number of branches in the flow graph - count of decision points that create alternate execution paths.",
    "CALL_PAIRS": "Number of calls to other functions or modules - indicates coupling between modules.",
    "LOC_CODE_AND_COMMENT": "Lines containing both code and comments - mixed lines with executable code and explanatory comments.",
    "LOC_COMMENTS": "Count of lines containing comments - includes both standalone comment lines and inline comments.",
    "CONDITION_COUNT": "Number of conditionals in the module - count of logical conditions in control structures.",
    "CYCLOMATIC_COMPLEXITY": "McCabe's cyclomatic complexity - counts linearly independent paths through code, measuring decision complexity.",
    "CYCLOMATIC_DENSITY": "Ratio of cyclomatic complexity to size - normalized complexity measure.",
    "DECISION_COUNT": "Number of decision points in the code - if/while/for statements and other control structures.",
    "DECISION_DENSITY": "Ratio of decision count to size - normalized measure of decision complexity.",
    "DESIGN_COMPLEXITY": "McCabe's design complexity - measures integration complexity between modules.",
    "DESIGN_DENSITY": "Ratio of design complexity to size - normalized integration complexity.",
    "EDGE_COUNT": "Number of edges in the control flow graph - connections between nodes in the program flow.",
    "ESSENTIAL_COMPLEXITY": "McCabe's essential complexity - measures how well-structured the code is, with 1 being perfectly structured.",
    "ESSENTIAL_DENSITY": "Ratio of essential complexity to size - normalized structural quality measure.",
    "LOC_EXECUTABLE": "Number of lines of executable code - actual code statements excluding comments and blanks.",
    "PARAMETER_COUNT": "Number of parameters - function/method parameters indicating interface complexity.",
    "HALSTEAD_CONTENT": "Halstead's intelligence content - measures the complexity of the algorithm itself.",
    "HALSTEAD_DIFFICULTY": "Halstead's difficulty - measures how difficult the code is to write or understand.",
    "HALSTEAD_EFFORT": "Halstead's effort - mental effort required to develop the module.",
    "HALSTEAD_ERROR_EST": "Halstead's delivered bugs estimate - predicted number of errors in the module.",
    "HALSTEAD_LENGTH": "Halstead's program length - total count of all operators and operands.",
    "HALSTEAD_LEVEL": "Halstead's program level - inverse of difficulty, measures implementation conciseness.",
    "HALSTEAD_PROG_TIME": "Halstead's time estimator - estimated time to program the module in seconds.",
    "HALSTEAD_VOLUME": "Halstead's volume - measures program size as bits needed to encode the program.",
    "NUM_OPERANDS": "Total count of operands - sum of all operand occurrences in the module.",
    "NUM_OPERATORS": "Total count of operators - sum of all operator occurrences in the module.",
    "NUM_UNIQUE_OPERANDS": "Number of unique operands - distinct variables, constants, and identifiers.",
    "NUM_UNIQUE_OPERATORS": "Number of unique operators - distinct operators like +, -, *, /, if, while.",
    "NUMBER_OF_LINES": "Total number of lines in the module - all lines including code, comments, and blanks.",
    "PERCENT_COMMENTS": "Percentage of comment lines - ratio of comment lines to total lines.",
    "LOC_TOTAL": "Total lines of code - comprehensive line count for the module.",
    "MAINTENANCE_SEVERITY": "Predicted maintenance difficulty - composite measure of code maintainability.",
    "MODIFIED_CONDITION_COUNT": "Modified condition/decision coverage count - testing-related complexity metric.",
    "MULTIPLE_CONDITION_COUNT": "Number of multiple conditions - complex boolean expressions in the code.",
    "NODE_COUNT": "Number of nodes in the control flow graph - distinct points in program execution."
  },
  "class_names": [
    "FALSE",
    "TRUE"
  ],
  "class_description": "Classes: 'FALSE' (Module has no reported defects - considered defect-free in testing/operation), 'TRUE' (Module has one or more reported defects - bugs found during testing or deployment)",
  "num_features": 36,
  "num_classes": 2
}