{
  "dataset_name": "kc1",
  "description": "NASA software defect prediction dataset from C++ storage management system for receiving and processing ground data. Contains static code metrics extracted using McCabe and Halstead feature extractors to predict software quality and defect-proneness.",
  "original_source": {
    "creator": "NASA Metrics Data Program (MDP)",
    "institution": "NASA IV&V Facility",
    "date": "December 2, 2004",
    "publication": "Menzies, T., DiStefano, J., Orrego, A., & Chapman, R. (2004). Assessing predictors of software defects. Proceedings, workshop on Predictive Software Models, Chicago."
  },
  "columns": [
    {
      "name": "loc",
      "semantic_description": "McCabe's line count of code - the number of lines of executable code in the module, excluding comments and blank lines.",
      "data_type": "numeric"
    },
    {
      "name": "v(g)",
      "semantic_description": "McCabe's cyclomatic complexity - counts linearly independent paths through code, measuring decision complexity (if/while/for statements).",
      "data_type": "numeric"
    },
    {
      "name": "ev(g)",
      "semantic_description": "McCabe's essential complexity - measures how well-structured the code is, with 1 being perfectly structured and higher values indicating unstructured code.",
      "data_type": "numeric"
    },
    {
      "name": "iv(g)",
      "semantic_description": "McCabe's design complexity - measures integration complexity between modules, indicating how complex the module's interface is.",
      "data_type": "numeric"
    },
    {
      "name": "n",
      "semantic_description": "Halstead's program length - total count of all operators and operands in the code (N1 + N2).",
      "data_type": "numeric"
    },
    {
      "name": "v",
      "semantic_description": "Halstead's volume - measures program size as N * log2(vocabulary), representing bits needed to encode the program.",
      "data_type": "numeric"
    },
    {
      "name": "l",
      "semantic_description": "Halstead's program level - inverse of difficulty, measures how concisely the algorithm is implemented (0 to 1).",
      "data_type": "numeric"
    },
    {
      "name": "d",
      "semantic_description": "Halstead's difficulty - measures how difficult the code is to write or understand, based on operator/operand usage patterns.",
      "data_type": "numeric"
    },
    {
      "name": "i",
      "semantic_description": "Halstead's intelligence content - measures the complexity of the algorithm itself, independent of the implementation.",
      "data_type": "numeric"
    },
    {
      "name": "e",
      "semantic_description": "Halstead's effort - mental effort required to develop the module, calculated as Volume * Difficulty.",
      "data_type": "numeric"
    },
    {
      "name": "b",
      "semantic_description": "Halstead's delivered bugs estimate - predicted number of errors in the module, calculated as Volume/3000.",
      "data_type": "numeric"
    },
    {
      "name": "t",
      "semantic_description": "Halstead's time estimator - estimated time to program the module in seconds, calculated as Effort/18.",
      "data_type": "numeric"
    },
    {
      "name": "lOCode",
      "semantic_description": "Halstead's count of lines of code - may differ from McCabe's loc due to different counting methods.",
      "data_type": "numeric"
    },
    {
      "name": "lOComment",
      "semantic_description": "Halstead's count of lines containing comments - includes both standalone comment lines and inline comments.",
      "data_type": "numeric"
    },
    {
      "name": "lOBlank",
      "semantic_description": "Halstead's count of blank lines - empty lines used for code readability and organization.",
      "data_type": "numeric"
    },
    {
      "name": "lOCodeAndComment",
      "semantic_description": "Lines containing both code and comments - mixed lines with executable code and explanatory comments.",
      "data_type": "numeric"
    },
    {
      "name": "uniq_Op",
      "semantic_description": "Number of unique operators (n1) - distinct operators like +, -, *, /, if, while, etc. used in the module.",
      "data_type": "numeric"
    },
    {
      "name": "uniq_Opnd",
      "semantic_description": "Number of unique operands (n2) - distinct variables, constants, and identifiers used in the module.",
      "data_type": "numeric"
    },
    {
      "name": "total_Op",
      "semantic_description": "Total count of operators (N1) - sum of all operator occurrences in the module.",
      "data_type": "numeric"
    },
    {
      "name": "total_Opnd",
      "semantic_description": "Total count of operands (N2) - sum of all operand occurrences in the module.",
      "data_type": "numeric"
    },
    {
      "name": "branchCount",
      "semantic_description": "Number of branches in the flow graph - count of decision points that create alternate execution paths.",
      "data_type": "numeric"
    }
  ],
  "target_classes": [
    {
      "name": "false",
      "meaning": "Module has no reported defects - considered defect-free in testing/operation"
    },
    {
      "name": "true",
      "meaning": "Module has one or more reported defects - bugs found during testing or deployment"
    }
  ],
  "dataset_history": "Part of NASA's software quality improvement initiative, collected from C++ modules implementing storage management for receiving and processing ground data. KC1 is from the same project family as KC2 but different subsystem. The dataset demonstrated that Naive Bayes achieves 45% probability of detection with 10% false alarm rate. Research showed that collecting metrics below sub-subsystem level yields higher defect detection rates. The dataset helped establish that accuracy alone is an uninformative measure for defect detectors.",
  "inference_notes": "KC1 and KC2 are related NASA projects sharing some third-party libraries but no other software overlap and different development personnel. The identical feature set across NASA MDP datasets enables cross-project defect prediction studies. McCabe and Halstead metrics from the 1970s remain standard despite criticism they may simply measure code size. The 'module' granularity refers to functions in C++ (methods in OO languages). Storage management systems like KC1 are critical for NASA's ground data processing infrastructure."
}